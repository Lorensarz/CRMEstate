<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/content-loader-adapter/src/main/java/com/petrov/content_loader_adapter/ContentLoaderAdapterApplication.java;C:/Users/loren/OpenideProjects/CRMEstate/content-loader-adapter/src/main/resources/application.yaml;C:/Users/loren/OpenideProjects/CRMEstate/content-loader-adapter/src/test/java/com/petrov/content_loader_adapter/ContentLoaderAdapterApplicationTests.java;C:/Users/loren/OpenideProjects/CRMEstate/content-processor/src/main/java/com/petrov/content_processor/ContentProcessorApplication.java;C:/Users/loren/OpenideProjects/CRMEstate/content-processor/src/main/resources/application.yaml;C:/Users/loren/OpenideProjects/CRMEstate/content-processor/src/test/java/com/petrov/content_processor/ContentProcessorApplicationTests.java;C:/Users/loren/OpenideProjects/CRMEstate/core-crm/src/main/java/com/petrov/core_crm/CoreCrmApplication.java;C:/Users/loren/OpenideProjects/CRMEstate/core-crm/src/main/resources/application.yaml;C:/Users/loren/OpenideProjects/CRMEstate/core-crm/src/test/java/com/petrov/core_crm/CoreCrmApplicationTests.java;C:/Users/loren/OpenideProjects/CRMEstate/notification/src/main/java/com/petrov/notification/NotificationApplication.java;C:/Users/loren/OpenideProjects/CRMEstate/notification/src/main/resources/application.yaml;C:/Users/loren/OpenideProjects/CRMEstate/notification/src/test/java/com/petrov/notification/NotificationApplicationTests.java;C:/Users/loren/OpenideProjects/CRMEstate/price-history/src/main/java/com/petrov/price_history/PriceHistoryApplication.java;C:/Users/loren/OpenideProjects/CRMEstate/price-history/src/main/resources/application.yaml;C:/Users/loren/OpenideProjects/CRMEstate/price-history/src/test/java/com/petrov/price_history/PriceHistoryApplicationTests.java" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;C:/Users/loren/OpenideProjects/CRMEstate&quot;:&quot;{\&quot;/content-processor/src/main/resources/application.yaml\&quot;:\&quot;This file appears to be a configuration file for a Spring Boot application. It does not contain any classes or functions, but rather defines the application\\u0027s configuration settings. Here\\u0027s a summary of the configuration:\\n\\n`spring.application.name`: Sets the name of the Spring application to \\\&quot;content-processor\\\&quot;.\\n\\n`spring.datasource`: Configures the database connection details, including the URL, username, and password for a PostgreSQL database named \\\&quot;user_db\\\&quot;.\\n\\n`spring.jpa.hibernate.ddl-auto`: Sets the Hibernate DDL auto-configuration to \\\&quot;update\\\&quot;, which means the database schema will be automatically updated based on the JPA entity definitions.\\n\\n`spring.jpa.show-sql`: Enables the display of SQL statements in the application logs.\\n\\n`server.port`: Sets the server port to 8081.\\n\\n`springdoc.api-docs.path`: Configures the path for the OpenAPI (Swagger) documentation to \\\&quot;/api-docs\\\&quot;.\\n\\n`springdoc.swagger-ui.path`: Configures the path for the Swagger UI to \\\&quot;/swagger-ui.html\\\&quot;.\\n\\nIn summary, this file sets up the configuration for a Spring Boot application that interacts with a PostgreSQL database and provides OpenAPI documentation.\&quot;,\&quot;/core-crm/src/test/java/com/petrov/core_crm/CoreCrmApplicationTests.java\&quot;:\&quot;This file is a test class for the `CoreCrmApplication` class in the `com.petrov.core_crm` package. It is a Spring Boot test that loads the application context to ensure that the application can be started successfully.\\n\\n`CoreCrmApplicationTests`: This class is a test suite for the `CoreCrmApplication` class, which is the main entry point for the Core CRM application.\\n\\n`contextLoads()`: This method is a test that checks if the application context can be loaded successfully without any errors.\&quot;,\&quot;/content-processor/src/test/java/com/petrov/content_processor/ContentProcessorApplicationTests.java\&quot;:\&quot;This file is a test class for the `ContentProcessorApplication` class in the `com.petrov.content_processor` package. It is a Spring Boot test that loads the application context to ensure that the application can be started successfully.\\n\\n`ContentProcessorApplicationTests`: This class is a test suite for the `ContentProcessorApplication` class.\\n\\n`contextLoads()`: This method is a test that checks if the application context can be loaded successfully.\&quot;,\&quot;/price-history/src/main/java/com/petrov/price_history/PriceHistoryApplication.java\&quot;:\&quot;This file is the main class for a Spring Boot application called \\\&quot;PriceHistoryApplication\\\&quot;. It does not contain any other classes or functions, but rather serves as the entry point for the application.\\n\\n`PriceHistoryApplication`: This is the main class that bootstraps the Spring Boot application and starts the application context.\\n\\n`main(String[] args)`: This is the main method that is executed when the application is started, and it calls the `run()` method of the `SpringApplication` class to start the application.\&quot;,\&quot;/core-crm/src/main/resources/application.yaml\&quot;:\&quot;This file is a configuration file for a Spring Boot application. It sets up the application\\u0027s name, database connection, JPA settings, server port, and Swagger documentation settings. There are no explicit classes or functions defined in this file. The file configures the application\\u0027s environment and dependencies to enable the core CRM functionality.\&quot;,\&quot;/price-history/src/main/resources/application.yaml\&quot;:\&quot;This file appears to be a configuration file for a Spring Boot application. It does not contain any classes or functions, but rather defines the application\\u0027s configuration settings. Here\\u0027s a summary of the file\\u0027s contents:\\n\\n`spring.application.name`: Specifies the name of the Spring application as \\\&quot;price-history\\\&quot;.\\n\\n`spring.datasource.url`: Configures the URL for the PostgreSQL database connection.\\n\\n`spring.datasource.username`: Specifies the username for the PostgreSQL database connection.\\n\\n`spring.datasource.password`: Specifies the password for the PostgreSQL database connection.\\n\\n`spring.jpa.hibernate.ddl-auto`: Configures the Hibernate DDL (Data Definition Language) auto-generation mode to \\\&quot;update\\\&quot;.\\n\\n`spring.jpa.show-sql`: Enables the display of SQL statements in the console.\\n\\n`server.port`: Specifies the port on which the application will run, which is 8084.\\n\\n`springdoc.api-docs.path`: Configures the path for the OpenAPI (Swagger) documentation, which is \\\&quot;/api-docs\\\&quot;.\\n\\n`springdoc.swagger-ui.path`: Configures the path for the Swagger UI, which is \\\&quot;/swagger-ui.html\\\&quot;.\\n\\nOverall, this file sets up the configuration for a Spring Boot application that interacts with a PostgreSQL database and provides OpenAPI documentation.\&quot;,\&quot;/content-processor/src/main/java/com/petrov/content_processor/ContentProcessorApplication.java\&quot;:\&quot;This file is a Spring Boot application that serves as the entry point for the Content Processor application. It does not contain any classes or functions, but rather sets up the Spring Boot application and starts the application.\\n\\nThe file does the following:\\n\\n1. Imports the necessary Spring Boot classes and annotations.\\n2. Defines the `ContentProcessorApplication` class, which is annotated with `@SpringBootApplication`, indicating that it is a Spring Boot application.\\n3. Provides the `main()` method, which is the entry point for the application and calls the `SpringApplication.run()` method to start the application.\&quot;,\&quot;/notification/src/main/java/com/petrov/notification/NotificationApplication.java\&quot;:\&quot;This file is the main class for a Spring Boot application called \\\&quot;NotificationApplication\\\&quot;. It does not contain any other classes or functions. The purpose of this file is to bootstrap the Spring Boot application and start the application\\u0027s main method.\\n\\n`NotificationApplication`: This is the main class for the Spring Boot application, which is annotated with `@SpringBootApplication` to enable auto-configuration and component scanning.\\n\\n`main`: This is the main method that is executed when the application is started. It calls the `SpringApplication.run()` method to start the Spring Boot application.\&quot;,\&quot;/content-loader-adapter/src/main/java/com/petrov/content_loader_adapter/ContentLoaderAdapterApplication.java\&quot;:\&quot;This file is the main application class for a Spring Boot application called \\\&quot;ContentLoaderAdapterApplication\\\&quot;. It does not contain any classes or functions, but rather serves as the entry point for the application, which is responsible for loading and configuring the necessary components for the content loader adapter.\\n\\nThe main purpose of this file is to bootstrap the Spring Boot application and start the application context.\&quot;,\&quot;/notification/src/test/java/com/petrov/notification/NotificationApplicationTests.java\&quot;:\&quot;This file is a test class for the `NotificationApplication` class in the `com.petrov.notification` package. It is a Spring Boot test that loads the application context to ensure that the application can be started successfully.\\n\\n`NotificationApplicationTests`: This is a test class that verifies the context of the `NotificationApplication` class can be loaded successfully.\\n\\n`contextLoads()`: This is a test method that checks if the application context can be loaded without any issues.\&quot;,\&quot;/price-history/src/test/java/com/petrov/price_history/PriceHistoryApplicationTests.java\&quot;:\&quot;This file appears to be a test class for a Spring Boot application. It does not contain any classes or functions, but rather a single test method that checks if the application context loads successfully.\\n\\n`PriceHistoryApplicationTests`: This is a test class that checks if the Spring Boot application context can be loaded successfully.\\n\\n`contextLoads()`: This test method checks if the Spring Boot application context can be loaded without any issues.\&quot;,\&quot;/content-loader-adapter/src/main/resources/application.yaml\&quot;:\&quot;This file appears to be a configuration file for a Spring Boot application. It does not contain any classes or functions, but rather defines the application\\u0027s configuration settings. Here\\u0027s a summary of the file:\\n\\n`spring.application.name`: Specifies the name of the Spring application as \\\&quot;content-loader-adapter\\\&quot;.\\n\\n`spring.datasource`: Configures the database connection details, including the URL, username, and password for a PostgreSQL database named \\\&quot;user_db\\\&quot;.\\n\\n`spring.jpa.hibernate.ddl-auto`: Sets the Hibernate DDL auto-configuration to \\\&quot;update\\\&quot;, which means the database schema will be automatically updated when the application starts.\\n\\n`spring.jpa.show-sql`: Enables the display of SQL statements executed by Hibernate.\\n\\n`server.port`: Sets the server port to 8082.\\n\\n`springdoc.api-docs.path`: Specifies the path for the OpenAPI (Swagger) documentation at \\\&quot;/api-docs\\\&quot;.\\n\\n`springdoc.swagger-ui.path`: Specifies the path for the Swagger UI at \\\&quot;/swagger-ui.html\\\&quot;.\\n\\nIn summary, this file configures the Spring Boot application\\u0027s database connection, Hibernate settings, server port, and OpenAPI documentation.\&quot;,\&quot;/content-loader-adapter/src/test/java/com/petrov/content_loader_adapter/ContentLoaderAdapterApplicationTests.java\&quot;:\&quot;This file is a test class for the `ContentLoaderAdapterApplication` class, which is part of the `com.petrov.content_loader_adapter` package. The file does not contain any classes or functions, but rather a single test method `contextLoads()` that is used to ensure that the Spring Boot application context can be loaded successfully.\\n\\n`ContentLoaderAdapterApplicationTests`: This is a test class that verifies the successful loading of the Spring Boot application context.\\n\\n`contextLoads()`: This test method ensures that the Spring Boot application context can be loaded without any issues.\&quot;,\&quot;/core-crm/src/main/java/com/petrov/core_crm/CoreCrmApplication.java\&quot;:\&quot;This file is the main class for a Spring Boot application called \\\&quot;CoreCrmApplication\\\&quot;. It does not contain any other classes or functions, but rather serves as the entry point for the application.\\n\\n`CoreCrmApplication`: This is the main class that bootstraps the Spring Boot application and starts the application context.\\n\\n`main(String[] args)`: This is the main method that is executed when the application is started, and it calls the `run()` method of the `SpringApplication` class to start the application.\&quot;,\&quot;/notification/src/main/resources/application.yaml\&quot;:\&quot;This file appears to be a configuration file for a Spring Boot application. It does not contain any classes or functions, but rather defines the application\\u0027s configuration settings. Here\\u0027s a summary of the configuration:\\n\\n`spring.application.name`: Sets the name of the Spring application to \\\&quot;notification\\\&quot;.\\n\\n`spring.datasource`: Configures the database connection details, including the URL, username, and password for a PostgreSQL database named \\\&quot;user_db\\\&quot;.\\n\\n`spring.jpa.hibernate.ddl-auto`: Sets the Hibernate DDL auto-configuration to \\\&quot;update\\\&quot;, which means the database schema will be automatically updated based on the JPA entity definitions.\\n\\n`spring.jpa.show-sql`: Enables the display of SQL statements executed by Hibernate.\\n\\n`server.port`: Sets the server port to 8083.\\n\\n`springdoc.api-docs.path`: Configures the path for the OpenAPI (Swagger) documentation to \\\&quot;/api-docs\\\&quot;.\\n\\n`springdoc.swagger-ui.path`: Configures the path for the Swagger UI to \\\&quot;/swagger-ui.html\\\&quot;.\\n\\nIn summary, this file sets up the configuration for a Spring Boot application that interacts with a PostgreSQL database and provides OpenAPI documentation.\&quot;}&quot;}" />
    <option name="fileSkeletonMaps" value="{&quot;C:/Users/loren/OpenideProjects/CRMEstate&quot;:&quot;{\&quot;/content-loader-adapter/src/main/java/com/petrov/content_loader_adapter/ContentLoaderAdapterApplication.java\&quot;:{\&quot;file_path\&quot;:\&quot;/content-loader-adapter/src/main/java/com/petrov/content_loader_adapter/ContentLoaderAdapterApplication.java\&quot;,\&quot;file_name\&quot;:\&quot;ContentLoaderAdapterApplication.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;main\&quot;,\&quot;method_parameters\&quot;:\&quot;(String[] args)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;args\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[8,1],[10,2]]}]},\&quot;/content-loader-adapter/src/main/resources/application.yaml\&quot;:{\&quot;file_path\&quot;:\&quot;/content-loader-adapter/src/main/resources/application.yaml\&quot;,\&quot;file_name\&quot;:\&quot;application.yaml\&quot;,\&quot;methods\&quot;:[]},\&quot;/content-loader-adapter/src/test/java/com/petrov/content_loader_adapter/ContentLoaderAdapterApplicationTests.java\&quot;:{\&quot;file_path\&quot;:\&quot;/content-loader-adapter/src/test/java/com/petrov/content_loader_adapter/ContentLoaderAdapterApplicationTests.java\&quot;,\&quot;file_name\&quot;:\&quot;ContentLoaderAdapterApplicationTests.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;contextLoads\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[8,1],[10,2]]}]},\&quot;/content-processor/src/main/java/com/petrov/content_processor/ContentProcessorApplication.java\&quot;:{\&quot;file_path\&quot;:\&quot;/content-processor/src/main/java/com/petrov/content_processor/ContentProcessorApplication.java\&quot;,\&quot;file_name\&quot;:\&quot;ContentProcessorApplication.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;main\&quot;,\&quot;method_parameters\&quot;:\&quot;(String[] args)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;args\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[8,1],[10,2]]}]},\&quot;/content-processor/src/main/resources/application.yaml\&quot;:{\&quot;file_path\&quot;:\&quot;/content-processor/src/main/resources/application.yaml\&quot;,\&quot;file_name\&quot;:\&quot;application.yaml\&quot;,\&quot;methods\&quot;:[]},\&quot;/content-processor/src/test/java/com/petrov/content_processor/ContentProcessorApplicationTests.java\&quot;:{\&quot;file_path\&quot;:\&quot;/content-processor/src/test/java/com/petrov/content_processor/ContentProcessorApplicationTests.java\&quot;,\&quot;file_name\&quot;:\&quot;ContentProcessorApplicationTests.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;contextLoads\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[8,1],[10,2]]}]},\&quot;/core-crm/src/main/java/com/petrov/core_crm/CoreCrmApplication.java\&quot;:{\&quot;file_path\&quot;:\&quot;/core-crm/src/main/java/com/petrov/core_crm/CoreCrmApplication.java\&quot;,\&quot;file_name\&quot;:\&quot;CoreCrmApplication.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;main\&quot;,\&quot;method_parameters\&quot;:\&quot;(String[] args)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;args\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[8,1],[10,2]]}]},\&quot;/core-crm/src/main/resources/application.yaml\&quot;:{\&quot;file_path\&quot;:\&quot;/core-crm/src/main/resources/application.yaml\&quot;,\&quot;file_name\&quot;:\&quot;application.yaml\&quot;,\&quot;methods\&quot;:[]},\&quot;/core-crm/src/test/java/com/petrov/core_crm/CoreCrmApplicationTests.java\&quot;:{\&quot;file_path\&quot;:\&quot;/core-crm/src/test/java/com/petrov/core_crm/CoreCrmApplicationTests.java\&quot;,\&quot;file_name\&quot;:\&quot;CoreCrmApplicationTests.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;contextLoads\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[8,1],[10,2]]}]},\&quot;/notification/src/main/java/com/petrov/notification/NotificationApplication.java\&quot;:{\&quot;file_path\&quot;:\&quot;/notification/src/main/java/com/petrov/notification/NotificationApplication.java\&quot;,\&quot;file_name\&quot;:\&quot;NotificationApplication.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;main\&quot;,\&quot;method_parameters\&quot;:\&quot;(String[] args)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;args\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[8,1],[10,2]]}]},\&quot;/notification/src/main/resources/application.yaml\&quot;:{\&quot;file_path\&quot;:\&quot;/notification/src/main/resources/application.yaml\&quot;,\&quot;file_name\&quot;:\&quot;application.yaml\&quot;,\&quot;methods\&quot;:[]},\&quot;/notification/src/test/java/com/petrov/notification/NotificationApplicationTests.java\&quot;:{\&quot;file_path\&quot;:\&quot;/notification/src/test/java/com/petrov/notification/NotificationApplicationTests.java\&quot;,\&quot;file_name\&quot;:\&quot;NotificationApplicationTests.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;contextLoads\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[8,1],[10,2]]}]},\&quot;/price-history/src/main/java/com/petrov/price_history/PriceHistoryApplication.java\&quot;:{\&quot;file_path\&quot;:\&quot;/price-history/src/main/java/com/petrov/price_history/PriceHistoryApplication.java\&quot;,\&quot;file_name\&quot;:\&quot;PriceHistoryApplication.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;main\&quot;,\&quot;method_parameters\&quot;:\&quot;(String[] args)\&quot;,\&quot;parameter_declarations\&quot;:[{\&quot;type\&quot;:\&quot;\&quot;,\&quot;name\&quot;:\&quot;args\&quot;}],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[8,1],[10,2]]}]},\&quot;/price-history/src/main/resources/application.yaml\&quot;:{\&quot;file_path\&quot;:\&quot;/price-history/src/main/resources/application.yaml\&quot;,\&quot;file_name\&quot;:\&quot;application.yaml\&quot;,\&quot;methods\&quot;:[]},\&quot;/price-history/src/test/java/com/petrov/price_history/PriceHistoryApplicationTests.java\&quot;:{\&quot;file_path\&quot;:\&quot;/price-history/src/test/java/com/petrov/price_history/PriceHistoryApplicationTests.java\&quot;,\&quot;file_name\&quot;:\&quot;PriceHistoryApplicationTests.java\&quot;,\&quot;methods\&quot;:[{\&quot;method_name\&quot;:\&quot;contextLoads\&quot;,\&quot;method_parameters\&quot;:\&quot;()\&quot;,\&quot;parameter_declarations\&quot;:[],\&quot;return_type\&quot;:\&quot;void\&quot;,\&quot;scope\&quot;:[[8,1],[10,2]]}]}}&quot;}" />
  </component>
</project>