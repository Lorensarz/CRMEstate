Index: content-loader-adapter/src/main/java/com/petrov/content_loader_adapter/service/ExcelParserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.petrov.content_loader_adapter.service;\r\n\r\nimport com.petrov.content_loader_adapter.dto.EstateDataDto;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\npublic interface ExcelParserService {\r\n\r\n\tList<EstateDataDto> parseExelFile(MultipartFile file) throws IOException;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/content-loader-adapter/src/main/java/com/petrov/content_loader_adapter/service/ExcelParserService.java b/content-loader-adapter/src/main/java/com/petrov/content_loader_adapter/service/ExcelParserService.java
--- a/content-loader-adapter/src/main/java/com/petrov/content_loader_adapter/service/ExcelParserService.java	(revision f00c5b8051fdbddb0f734140066060595af0cece)
+++ b/content-loader-adapter/src/main/java/com/petrov/content_loader_adapter/service/ExcelParserService.java	(date 1756194250126)
@@ -1,12 +1,113 @@
 package com.petrov.content_loader_adapter.service;
 
 import com.petrov.content_loader_adapter.dto.EstateDataDto;
+import lombok.extern.slf4j.Slf4j;
+import org.apache.poi.ss.usermodel.Cell;
+import org.apache.poi.ss.usermodel.Row;
+import org.apache.poi.ss.usermodel.Sheet;
+import org.apache.poi.ss.usermodel.Workbook;
+import org.apache.poi.xssf.streaming.SXSSFWorkbook;
+import org.apache.poi.xssf.usermodel.XSSFWorkbook;
+import org.springframework.stereotype.Service;
 import org.springframework.web.multipart.MultipartFile;
 
 import java.io.IOException;
+import java.io.InputStream;
+import java.math.BigDecimal;
+import java.time.LocalDateTime;
+import java.util.ArrayList;
+import java.util.Iterator;
 import java.util.List;
+import java.util.Objects;
+
+@Slf4j
+@Service
+public class ExcelParserService {
+
+	public List<EstateDataDto> parseExelFile(MultipartFile file) throws IOException {
+		List<EstateDataDto> estateDataDtoList = new ArrayList<>();
+
+		try (InputStream inputStream = file.getInputStream();
+			 Workbook workbook = new SXSSFWorkbook(new XSSFWorkbook(inputStream))) {
+
+			Sheet sheet = workbook.getSheetAt(0);
+			Iterator<Row> rowIterator = sheet.iterator();
+
+			if (rowIterator.hasNext()) {
+				rowIterator.next();
+			}
+
+			while (rowIterator.hasNext()) {
+				Row row = rowIterator.next();
+				EstateDataDto dto = parseRowToDto(row);
+				if (Objects.nonNull(dto)) {
+					estateDataDtoList.add(dto);
+				}
+			}
+		}
+		return estateDataDtoList;
+
 
-public interface ExcelParserService {
+	}
 
-	List<EstateDataDto> parseExelFile(MultipartFile file) throws IOException;
+	private EstateDataDto parseRowToDto(Row row) {
+		if (Objects.isNull(row)) {
+			return null;
+		}
+
+		EstateDataDto dto = new EstateDataDto();
+
+		try {
+			dto.setCadastrNumber(getStringCellValue(row.getCell(0)));
+			dto.setSource(getStringCellValue(row.getCell(1)));
+			dto.setPrice(getBigDecimalCellValue(row.getCell(2)));
+			dto.setType(getStringCellValue(row.getCell(3)));
+			dto.setSquare(getBigDecimalCellValue(row.getCell(4)));
+			dto.setRoomCount(getIntegerCellValue(row.getCell(5)));
+			dto.setFloor(getIntegerCellValue(row.getCell(6)));
+			dto.setTotalFloors(getIntegerCellValue(row.getCell(7)));
+			dto.setAddress(getStringCellValue(row.getCell(8)));
+			dto.setUpdatedAt(LocalDateTime.now());
+
+		} catch (Exception e) {
+			log.error("Error parsing row: {}", e.getMessage());
+			return null;
+		}
+
+		return dto;
+	}
+
+	private String getStringCellValue(Cell cell) {
+		if (Objects.isNull(cell)) {
+			return null;
+		}
+		return switch (cell.getCellType()) {
+			case STRING -> cell.getStringCellValue().trim();
+			case NUMERIC -> String.valueOf((long) cell.getNumericCellValue());
+			default -> null;
+		};
+	}
+
+	private BigDecimal getBigDecimalCellValue(Cell cell) {
+		if (Objects.isNull(cell)) {
+			return null;
+		}
+		return switch (cell.getCellType()) {
+			case NUMERIC -> BigDecimal.valueOf(cell.getNumericCellValue());
+			case STRING -> new BigDecimal(cell.getStringCellValue());
+			default -> null;
+		};
+	}
+
+	private Integer getIntegerCellValue(Cell cell) {
+		if (Objects.isNull(cell)) {
+			return null;
+		}
+		return switch (cell.getCellType()) {
+			case NUMERIC -> (int) cell.getNumericCellValue();
+			case STRING -> Integer.parseInt(cell.getStringCellValue().trim());
+			default -> null;
+		};
+	}
+
 }
Index: content-processor/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\r\n         http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <parent>\r\n        <artifactId>CRMEstate</artifactId> <!-- Исправлено! -->\r\n        <groupId>com.petrov</groupId>\r\n        <version>1.0.0</version>\r\n    </parent>\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <artifactId>content-processor</artifactId>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.postgresql</groupId>\r\n            <artifactId>postgresql</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springdoc</groupId>\r\n            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n                <configuration>\r\n                    <mainClass>com.petrov.content-processor.ContentProcessorApplication</mainClass>\r\n                </configuration>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/content-processor/pom.xml b/content-processor/pom.xml
--- a/content-processor/pom.xml	(revision f00c5b8051fdbddb0f734140066060595af0cece)
+++ b/content-processor/pom.xml	(date 1756195259041)
@@ -15,20 +15,30 @@
     <dependencies>
         <dependency>
             <groupId>org.springframework.boot</groupId>
-            <artifactId>spring-boot-starter-web</artifactId>
+            <artifactId>spring-boot-starter-data-jpa</artifactId>
         </dependency>
         <dependency>
-            <groupId>org.springframework.boot</groupId>
-            <artifactId>spring-boot-starter-data-jpa</artifactId>
+            <groupId>org.springframework.kafka</groupId>
+            <artifactId>spring-kafka</artifactId>
         </dependency>
         <dependency>
             <groupId>org.postgresql</groupId>
             <artifactId>postgresql</artifactId>
             <scope>runtime</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.hibernate.orm</groupId>
+            <artifactId>hibernate-jpamodelgen</artifactId>
+            <scope>provided</scope>
         </dependency>
         <dependency>
             <groupId>org.springdoc</groupId>
             <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+            <scope>provided</scope>
         </dependency>
     </dependencies>
 
Index: content-loader-adapter/src/test/java/com/petrov/content_loader_adapter/service/ExcelParserServiceImplTeste.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.petrov.content_loader_adapter.service;\r\n\r\nimport com.petrov.content_loader_adapter.dto.EstateDataDto;\r\nimport org.apache.poi.ss.usermodel.Cell;\r\nimport org.apache.poi.ss.usermodel.Row;\r\nimport org.apache.poi.ss.usermodel.Sheet;\r\nimport org.apache.poi.ss.usermodel.Workbook;\r\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\r\n\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.IOException;\r\nimport java.math.BigDecimal;\r\nimport java.util.List;\r\n\r\n\r\nimport org.junit.jupiter.api.Test;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.extension.ExtendWith;\r\nimport org.mockito.InjectMocks;\r\nimport org.mockito.junit.jupiter.MockitoExtension;\r\nimport org.springframework.mock.web.MockMultipartFile;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\n@ExtendWith(MockitoExtension.class)\r\nclass ExcelParserServiceImplTest {\r\n\r\n\t@InjectMocks\r\n\tprivate ExcelParserServiceImpl exelParserService;\r\n\r\n\tprivate Workbook workbook;\r\n\tprivate Sheet sheet;\r\n\r\n\t@BeforeEach\r\n\tvoid setUp() {\r\n\t\tworkbook = new XSSFWorkbook();\r\n\t\tsheet = workbook.createSheet(\"Test Sheet\");\r\n\t}\r\n\r\n\t@Test\r\n\tvoid testParseExelFile_Success() throws IOException {\r\n\t\t// Создаем тестовые данные в Excel\r\n\t\tcreateTestRow(sheet, \"12345\", \"Source1\", \"1000000\", \"Apartment\", \"50.5\", \"2\", \"3\", \"5\", \"Test Address\");\r\n\r\n\t\t// Преобразуем Workbook в MultipartFile\r\n\t\tMultipartFile file = createMultipartFile(workbook);\r\n\r\n\t\t// Вызываем метод для тестирования\r\n\t\tList<EstateDataDto> result = exelParserService.parseExelFile(file);\r\n\r\n\t\t// Проверяем результаты\r\n\t\tassertNotNull(result);\r\n\t\tassertEquals(1, result.size());\r\n\r\n\t\tEstateDataDto dto = result.get(0);\r\n\t\tassertEquals(\"12345\", dto.getCadastrNumber());\r\n\t\tassertEquals(\"Source1\", dto.getSource());\r\n\t\tassertEquals(new BigDecimal(\"1000000\"), dto.getPrice());\r\n\t\tassertEquals(\"Apartment\", dto.getType());\r\n\t\tassertEquals(new BigDecimal(\"50.5\"), dto.getSquare());\r\n\t\tassertEquals(2, dto.getRoomCount());\r\n\t\tassertEquals(3, dto.getFloor());\r\n\t\tassertEquals(5, dto.getTotalFloors());\r\n\t\tassertEquals(\"Test Address\", dto.getAddress());\r\n\t\tassertNotNull(dto.getUpdatedAt());\r\n\t}\r\n\r\n\t@Test\r\n\tvoid testParseExelFile_EmptyFile() throws IOException {\r\n\t\t// Создаем пустой файл\r\n\t\tMultipartFile file = createMultipartFile(workbook);\r\n\r\n\t\t// Вызываем метод для тестирования\r\n\t\tList<EstateDataDto> result = exelParserService.parseExelFile(file);\r\n\r\n\t\t// Проверяем результаты\r\n\t\tassertNotNull(result);\r\n\t\tassertTrue(result.isEmpty());\r\n\t}\r\n\r\n\t@Test\r\n\tvoid testParseExelFile_InvalidData() throws IOException {\r\n\t\t// Создаем строку с некорректными данными\r\n\t\tcreateTestRow(sheet, \"12345\", \"Source1\", \"InvalidPrice\", \"Apartment\", \"InvalidSquare\", \"InvalidRoomCount\", \"3\", \"5\", \"Test Address\");\r\n\r\n\t\t// Преобразуем Workbook в MultipartFile\r\n\t\tMultipartFile file = createMultipartFile(workbook);\r\n\r\n\t\t// Вызываем метод для тестирования\r\n\t\tList<EstateDataDto> result = exelParserService.parseExelFile(file);\r\n\r\n\t\t// Проверяем результаты\r\n\t\tassertNotNull(result);\r\n\t\tassertTrue(result.isEmpty());\r\n\t}\r\n\r\n\t@Test\r\n\tvoid testParseRowToDto_NullRow() {\r\n\t\t// Вызываем метод для тестирования\r\n\t\tEstateDataDto result = exelParserService.parseRowToDto(null);\r\n\r\n\t\t// Проверяем результаты\r\n\t\tassertNull(result);\r\n\t}\r\n\r\n\t@Test\r\n\tvoid testParseRowToDto_ValidRow() {\r\n\t\t// Создаем тестовую строку\r\n\t\tRow row = sheet.createRow(0);\r\n\t\tcreateCell(row, 0, \"12345\");\r\n\t\tcreateCell(row, 1, \"Source1\");\r\n\t\tcreateCell(row, 2, \"1000000\");\r\n\t\tcreateCell(row, 3, \"Apartment\");\r\n\t\tcreateCell(row, 4, \"50.5\");\r\n\t\tcreateCell(row, 5, \"2\");\r\n\t\tcreateCell(row, 6, \"3\");\r\n\t\tcreateCell(row, 7, \"5\");\r\n\t\tcreateCell(row, 8, \"Test Address\");\r\n\r\n\t\t// Вызываем метод для тестирования\r\n\t\tEstateDataDto result = exelParserService.parseRowToDto(row);\r\n\r\n\t\t// Проверяем результаты\r\n\t\tassertNotNull(result);\r\n\t\tassertEquals(\"12345\", result.getCadastrNumber());\r\n\t\tassertEquals(\"Source1\", result.getSource());\r\n\t\tassertEquals(new BigDecimal(\"1000000\"), result.getPrice());\r\n\t\tassertEquals(\"Apartment\", result.getType());\r\n\t\tassertEquals(new BigDecimal(\"50.5\"), result.getSquare());\r\n\t\tassertEquals(2, result.getRoomCount());\r\n\t\tassertEquals(3, result.getFloor());\r\n\t\tassertEquals(5, result.getTotalFloors());\r\n\t\tassertEquals(\"Test Address\", result.getAddress());\r\n\t\tassertNotNull(result.getUpdatedAt());\r\n\t}\r\n\r\n\t@Test\r\n\tvoid testParseRowToDto_InvalidRow() {\r\n\t\t// Создаем строку с некорректными данными\r\n\t\tRow row = sheet.createRow(0);\r\n\t\tcreateCell(row, 0, \"12345\");\r\n\t\tcreateCell(row, 1, \"Source1\");\r\n\t\tcreateCell(row, 2, \"InvalidPrice\"); // Некорректное значение\r\n\t\tcreateCell(row, 3, \"Apartment\");\r\n\t\tcreateCell(row, 4, \"InvalidSquare\"); // Некорректное значение\r\n\t\tcreateCell(row, 5, \"InvalidRoomCount\"); // Некорректное значение\r\n\t\tcreateCell(row, 6, \"3\");\r\n\t\tcreateCell(row, 7, \"5\");\r\n\t\tcreateCell(row, 8, \"Test Address\");\r\n\r\n\t\t// Вызываем метод для тестирования\r\n\t\tEstateDataDto result = exelParserService.parseRowToDto(row);\r\n\r\n\t\t// Проверяем результаты\r\n\t\tassertNull(result);\r\n\t}\r\n\r\n\t// Вспомогательные методы\r\n\r\n\tprivate void createTestRow(Sheet sheet, String cadastrNumber, String source, String price, String type, String square, String roomCount, String floor, String totalFloors, String address) {\r\n\t\tRow row = sheet.createRow(sheet.getLastRowNum() + 1);\r\n\t\tcreateCell(row, 0, cadastrNumber);\r\n\t\tcreateCell(row, 1, source);\r\n\t\tcreateCell(row, 2, price);\r\n\t\tcreateCell(row, 3, type);\r\n\t\tcreateCell(row, 4, square);\r\n\t\tcreateCell(row, 5, roomCount);\r\n\t\tcreateCell(row, 6, floor);\r\n\t\tcreateCell(row, 7, totalFloors);\r\n\t\tcreateCell(row, 8, address);\r\n\t}\r\n\r\n\tprivate void createCell(Row row, int columnIndex, String value) {\r\n\t\tCell cell = row.createCell(columnIndex);\r\n\t\tcell.setCellValue(value);\r\n\t}\r\n\r\n\tprivate MultipartFile createMultipartFile(Workbook workbook) throws IOException {\r\n\t\tByteArrayOutputStream outputStream = new ByteArrayOutputStream();\r\n\t\tworkbook.write(outputStream);\r\n\t\treturn new MockMultipartFile(\"test.xlsx\", \"test.xlsx\", \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", outputStream.toByteArray());\r\n\t}\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/content-loader-adapter/src/test/java/com/petrov/content_loader_adapter/service/ExcelParserServiceImplTeste.java b/content-loader-adapter/src/test/java/com/petrov/content_loader_adapter/service/ExcelParserServiceImplTeste.java
--- a/content-loader-adapter/src/test/java/com/petrov/content_loader_adapter/service/ExcelParserServiceImplTeste.java	(revision f00c5b8051fdbddb0f734140066060595af0cece)
+++ b/content-loader-adapter/src/test/java/com/petrov/content_loader_adapter/service/ExcelParserServiceImplTeste.java	(date 1756194250136)
@@ -28,7 +28,7 @@
 class ExcelParserServiceImplTest {
 
 	@InjectMocks
-	private ExcelParserServiceImpl exelParserService;
+	private ExcelParserService exelParserService;
 
 	private Workbook workbook;
 	private Sheet sheet;
Index: content-loader-adapter/src/main/java/com/petrov/content_loader_adapter/controller/FileUploadController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.petrov.content_loader_adapter.controller;\r\n\r\nimport com.petrov.content_loader_adapter.dto.EstateDataDto;\r\nimport com.petrov.content_loader_adapter.service.ExcelParserService;\r\nimport com.petrov.content_loader_adapter.service.KafkaProducerService;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RequestParam;\r\nimport org.springframework.web.bind.annotation.RestController;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\n@RestController\r\n@RequestMapping(\"/api\")\r\n@RequiredArgsConstructor\r\npublic class FileUploadController {\r\n\r\n\tprivate final ExcelParserService exelParserService;\r\n\tprivate final KafkaProducerService kafkaProducerService;\r\n\r\n\t@PostMapping(\"/load\")\r\n\tpublic ResponseEntity<String> uploadFile(@RequestParam(\"file\")MultipartFile file) {\r\n\t\tif (file.isEmpty()) {\r\n\t\t\treturn ResponseEntity.badRequest().body(\"Please select a file to upload\");\r\n\t\t}\r\n\t\tif (!file.getOriginalFilename().endsWith(\".xlsx\")) {\r\n\t\t\treturn ResponseEntity.badRequest().body(\"Only Exel files (\\\".xlsx\\\") are supported\");\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tList<EstateDataDto> estateDataList = exelParserService.parseExelFile(file);\r\n\t\t\tif (estateDataList.isEmpty()) {\r\n\t\t\t\treturn ResponseEntity.badRequest().body(\"No valid data found in the file\");\r\n\t\t\t}\r\n\r\n\t\t\tkafkaProducerService.sendEstateDataBatch(estateDataList);\r\n\t\t\treturn ResponseEntity.ok()\r\n\t\t\t\t\t.body(\"Successfully processed \" + estateDataList.size() + \" records and sent to Kafka\");\r\n\r\n\t\t} catch (IOException e) {\r\n\t\t\treturn ResponseEntity.internalServerError()\r\n\t\t\t\t\t.body(\"Failed to process file: \" + e.getMessage());\r\n\t\t} catch (Exception e) {\r\n\t\t\treturn ResponseEntity.internalServerError()\r\n\t\t\t\t\t.body(\"Unexpected error \" + e.getMessage());\r\n\t\t}\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/content-loader-adapter/src/main/java/com/petrov/content_loader_adapter/controller/FileUploadController.java b/content-loader-adapter/src/main/java/com/petrov/content_loader_adapter/controller/FileUploadController.java
--- a/content-loader-adapter/src/main/java/com/petrov/content_loader_adapter/controller/FileUploadController.java	(revision f00c5b8051fdbddb0f734140066060595af0cece)
+++ b/content-loader-adapter/src/main/java/com/petrov/content_loader_adapter/controller/FileUploadController.java	(date 1756194250132)
@@ -1,7 +1,6 @@
 package com.petrov.content_loader_adapter.controller;
 
 import com.petrov.content_loader_adapter.dto.EstateDataDto;
-import com.petrov.content_loader_adapter.service.ExcelParserService;
 import com.petrov.content_loader_adapter.service.KafkaProducerService;
 import lombok.RequiredArgsConstructor;
 import org.springframework.http.ResponseEntity;
@@ -23,7 +22,7 @@
 	private final KafkaProducerService kafkaProducerService;
 
 	@PostMapping("/load")
-	public ResponseEntity<String> uploadFile(@RequestParam("file")MultipartFile file) {
+	public ResponseEntity<String> uploadFile(@RequestParam("file") MultipartFile file) {
 		if (file.isEmpty()) {
 			return ResponseEntity.badRequest().body("Please select a file to upload");
 		}
Index: content-loader-adapter/src/main/java/com/petrov/content_loader_adapter/service/ExcelParserServiceImpl.java
===================================================================
diff --git a/content-loader-adapter/src/main/java/com/petrov/content_loader_adapter/service/ExcelParserServiceImpl.java b/content-loader-adapter/src/main/java/com/petrov/content_loader_adapter/service/ExcelParserServiceImpl.java
deleted file mode 100644
--- a/content-loader-adapter/src/main/java/com/petrov/content_loader_adapter/service/ExcelParserServiceImpl.java	(revision f00c5b8051fdbddb0f734140066060595af0cece)
+++ /dev/null	(revision f00c5b8051fdbddb0f734140066060595af0cece)
@@ -1,113 +0,0 @@
-package com.petrov.content_loader_adapter.service;
-
-import com.petrov.content_loader_adapter.dto.EstateDataDto;
-import lombok.extern.slf4j.Slf4j;
-import org.apache.poi.ss.usermodel.Cell;
-import org.apache.poi.ss.usermodel.Row;
-import org.apache.poi.ss.usermodel.Sheet;
-import org.apache.poi.ss.usermodel.Workbook;
-import org.apache.poi.xssf.streaming.SXSSFWorkbook;
-import org.apache.poi.xssf.usermodel.XSSFWorkbook;
-import org.springframework.stereotype.Service;
-import org.springframework.web.multipart.MultipartFile;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.math.BigDecimal;
-import java.time.LocalDateTime;
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Objects;
-
-@Slf4j
-@Service
-public class ExcelParserServiceImpl implements ExcelParserService {
-
-	public List<EstateDataDto> parseExelFile(MultipartFile file) throws IOException {
-		List<EstateDataDto> estateDataDtoList = new ArrayList<>();
-
-		try (InputStream inputStream = file.getInputStream();
-			 Workbook workbook = new SXSSFWorkbook(new XSSFWorkbook(inputStream))) {
-
-			Sheet sheet = workbook.getSheetAt(0);
-			Iterator<Row> rowIterator = sheet.iterator();
-
-			if (rowIterator.hasNext()) {
-				rowIterator.next();
-			}
-
-			while (rowIterator.hasNext()) {
-				Row row = rowIterator.next();
-				EstateDataDto dto = parseRowToDto(row);
-				if (Objects.nonNull(dto)) {
-					estateDataDtoList.add(dto);
-				}
-			}
-		}
-		return estateDataDtoList;
-
-
-	}
-
-	private EstateDataDto parseRowToDto(Row row) {
-		if (Objects.isNull(row)) {
-			return null;
-		}
-
-		EstateDataDto dto = new EstateDataDto();
-
-		try {
-			dto.setCadastrNumber(getStringCellValue(row.getCell(0)));
-			dto.setSource(getStringCellValue(row.getCell(1)));
-			dto.setPrice(getBigDecimalCellValue(row.getCell(2)));
-			dto.setType(getStringCellValue(row.getCell(3)));
-			dto.setSquare(getBigDecimalCellValue(row.getCell(4)));
-			dto.setRoomCount(getIntegerCellValue(row.getCell(5)));
-			dto.setFloor(getIntegerCellValue(row.getCell(6)));
-			dto.setTotalFloors(getIntegerCellValue(row.getCell(7)));
-			dto.setAddress(getStringCellValue(row.getCell(8)));
-			dto.setUpdatedAt(LocalDateTime.now());
-
-		} catch (Exception e) {
-			log.error("Error parsing row: {}", e.getMessage());
-			return null;
-		}
-
-		return dto;
-	}
-
-	private String getStringCellValue(Cell cell) {
-		if (Objects.isNull(cell)) {
-			return null;
-		}
-		return switch (cell.getCellType()) {
-			case STRING -> cell.getStringCellValue().trim();
-			case NUMERIC -> String.valueOf((long) cell.getNumericCellValue());
-			default -> null;
-		};
-	}
-
-	private BigDecimal getBigDecimalCellValue(Cell cell) {
-		if (Objects.isNull(cell)) {
-			return null;
-		}
-		return switch (cell.getCellType()) {
-			case NUMERIC -> BigDecimal.valueOf(cell.getNumericCellValue());
-			case STRING -> new BigDecimal(cell.getStringCellValue());
-			default -> null;
-		};
-	}
-
-	private Integer getIntegerCellValue(Cell cell) {
-		if (Objects.isNull(cell)) {
-			return null;
-		}
-		return switch (cell.getCellType()) {
-			case NUMERIC -> (int) cell.getNumericCellValue();
-			case STRING -> Integer.parseInt(cell.getStringCellValue().trim());
-			default -> null;
-		};
-	}
-
-}
Index: content-processor/src/main/java/com/petrov/content_processor/repository/EstateRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/content-processor/src/main/java/com/petrov/content_processor/repository/EstateRepository.java b/content-processor/src/main/java/com/petrov/content_processor/repository/EstateRepository.java
new file mode 100644
--- /dev/null	(date 1756195645155)
+++ b/content-processor/src/main/java/com/petrov/content_processor/repository/EstateRepository.java	(date 1756195645155)
@@ -0,0 +1,7 @@
+package com.petrov.content_processor.repository;
+
+import org.springframework.stereotype.Repository;
+
+@Repository
+public interface EstateRepository Jpa {
+}
Index: content-loader-adapter/Dockerfile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/content-loader-adapter/Dockerfile b/content-loader-adapter/Dockerfile
new file mode 100644
--- /dev/null	(date 1756193806512)
+++ b/content-loader-adapter/Dockerfile	(date 1756193806512)
@@ -0,0 +1,14 @@
+FROM ghcr.io/graalvm/native-image-community:21-ol9 AS builder
+RUN microdnf install maven
+WORKDIR /app
+COPY pom.xml .
+RUN mvn dependency:go-offline -B
+COPY src ./src
+RUN mvn clean package -DskipTests
+RUN native-image -jar target/content-loader-adapter-*.jar --no-fallback -H:Name=content-loader-app
+FROM oraclelinux:9-slim
+WORKDIR /app
+COPY --from=builder /app/content-loader-app ./app
+COPY --from=builder /app/target/content-loader-adapter-*.jar app.jar
+EXPOSE 8082
+ENTRYPOINT ["java", "-jar", "app.jar"]
\ No newline at end of file
Index: content-processor/src/main/java/com/petrov/content_processor/config/KafkaConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/content-processor/src/main/java/com/petrov/content_processor/config/KafkaConfig.java b/content-processor/src/main/java/com/petrov/content_processor/config/KafkaConfig.java
new file mode 100644
--- /dev/null	(date 1756194382032)
+++ b/content-processor/src/main/java/com/petrov/content_processor/config/KafkaConfig.java	(date 1756194382032)
@@ -0,0 +1,4 @@
+package com.petrov.content_processor.config;
+
+public class KafkaConfig {
+}
Index: content-processor/src/main/java/com/petrov/content_processor/entity/Estate.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/content-processor/src/main/java/com/petrov/content_processor/entity/Estate.java b/content-processor/src/main/java/com/petrov/content_processor/entity/Estate.java
new file mode 100644
--- /dev/null	(date 1756195645172)
+++ b/content-processor/src/main/java/com/petrov/content_processor/entity/Estate.java	(date 1756195645172)
@@ -0,0 +1,68 @@
+package com.petrov.content_processor.entity;
+
+import jakarta.persistence.Column;
+import jakarta.persistence.Entity;
+import jakarta.persistence.GeneratedValue;
+import jakarta.persistence.GenerationType;
+import jakarta.persistence.Id;
+import jakarta.persistence.Table;
+import jakarta.persistence.UniqueConstraint;
+import jakarta.persistence.Version;
+import jakarta.validation.constraints.NotNull;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.Setter;
+
+import java.math.BigDecimal;
+import java.time.LocalDateTime;
+
+@Entity
+@Getter
+@Setter
+@AllArgsConstructor
+@Table(name = "estates",
+		uniqueConstraints = @UniqueConstraint(
+				columnNames = {"cadastr_number", "source"}
+		))
+public class Estate {
+
+	@Id
+	@GeneratedValue(strategy = GenerationType.IDENTITY)
+	private Long id;
+
+	@NotNull
+	@Column(name = "source", nullable = false)
+	private String source;
+
+	@NotNull
+	@Column(name = "price", nullable = false, precision = 15, scale = 2)
+	private BigDecimal price;
+
+	@Column(name = "type")
+	private String type;
+
+	@Column(name = "square", precision = 10, scale = 2)
+	private BigDecimal square;
+
+	@Column(name = "room_count")
+	private Integer roomCount;
+
+	@Column(name = "floor")
+	private Integer floor;
+
+	@Column(name = "total_floors")
+	private Integer totalFloor;
+
+	@Column(name = "address")
+	private String address;
+
+	@Column(name = "updated_at", nullable = false)
+	private LocalDateTime updatedAt;
+
+	@Version
+	private Long version;
+
+	public Estate() {
+		this.updatedAt = LocalDateTime.now();
+	}
+}
Index: content-processor/src/main/java/com/petrov/content_processor/config/BatchConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/content-processor/src/main/java/com/petrov/content_processor/config/BatchConfig.java b/content-processor/src/main/java/com/petrov/content_processor/config/BatchConfig.java
new file mode 100644
--- /dev/null	(date 1756194395194)
+++ b/content-processor/src/main/java/com/petrov/content_processor/config/BatchConfig.java	(date 1756194395194)
@@ -0,0 +1,4 @@
+package com.petrov.content_processor.config;
+
+public class BatchConfig {
+}
diff --git a/project-root/docker-compose.yaml b/docker/docker-compose.yaml
rename from project-root/docker-compose.yaml
rename to docker/docker-compose.yaml
diff --git a/project-root/init/init-crm.sql b/init/init-crm.sql
rename from project-root/init/init-crm.sql
rename to init/init-crm.sql
diff --git a/project-root/init/init-history.sql b/init/init-history.sql
rename from project-root/init/init-history.sql
rename to init/init-history.sql
