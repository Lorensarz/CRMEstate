version: '3.8'

services:
  # База данных для CRM
  postgres-crm:
    image: postgres:15-alpine
    container_name: postgres-crm
    environment:
      POSTGRES_DB: crm_db
      POSTGRES_USER: crm_user
      POSTGRES_PASSWORD: crm_password
    ports:
      - "5432:5432"
    volumes:
      - postgres-crm-data:/var/lib/postgresql/data
      - ./init/init-crm.sql:/docker-entrypoint-initdb.d/init-crm.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crm_user -d crm_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - estate-network

  # База данных для истории цен
  postgres-history:
    image: postgres:15-alpine
    container_name: postgres-history
    environment:
      POSTGRES_DB: history_db
      POSTGRES_USER: history_user
      POSTGRES_PASSWORD: history_password
    ports:
      - "5433:5432"
    volumes:
      - postgres-history-data:/var/lib/postgresql/data
      - ./init/init-history.sql:/docker-entrypoint-initdb.d/init-history.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U history_user -d history_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - estate-network

  # База данных для Notification сервиса
  postgres-notification:
    image: postgres:15-alpine
    container_name: postgres-notification
    environment:
      POSTGRES_DB: notification_db
      POSTGRES_USER: notification_user
      POSTGRES_PASSWORD: notification_password
    ports:
      - "5434:5432"
    volumes:
      - postgres-notification-data:/var/lib/postgresql/data
      - ./init/init-notification.sql:/docker-entrypoint-initdb.d/init-notification.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U notification_user -d notification_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - estate-network

  # Kafka в режиме KRaft
  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka
    environment:
      # Настройки KRaft
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT

      # Общие настройки
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_CFG_DELETE_TOPIC_ENABLE: "true"
      KAFKA_CFG_LOG_RETENTION_HOURS: 168
      KAFKA_CFG_NUM_PARTITIONS: 3
      KAFKA_CFG_DEFAULT_REPLICATION_FACTOR: 1

      # Для доступа с хоста
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092

      ALLOW_PLAINTEXT_LISTENER: "yes"
    ports:
      - "9092:9092"    # Internal broker port
      - "29092:29092"  # External broker port
      - "9093:9093"    # Controller port
    volumes:
      - kafka-data:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s
    networks:
      - estate-network
    restart: unless-stopped

  # Сервис для создания топиков Kafka
  kafka-init:
    image: bitnami/kafka:3.7
    container_name: kafka-init
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      ALLOW_PLAINTEXT_LISTENER: "yes"
    command: >
      /bin/bash -c "
      echo 'Waiting for Kafka to be ready...';
      until kafka-topics.sh --bootstrap-server kafka:9092 --list; do
        echo 'Kafka is not ready yet...';
        sleep 5;
      done;
      echo 'Creating topics...';
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic raw-estate-data --partitions 3 --replication-factor 1;
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic notifications --partitions 3 --replication-factor 1;
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic notifications.DLT --partitions 3 --replication-factor 1;
      echo 'Topics created:';
      kafka-topics.sh --bootstrap-server kafka:9092 --list;
      echo 'Kafka initialization completed successfully'
      "
    networks:
      - estate-network
    restart: on-failure

  # UI для управления Kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=kafka:9093
    networks:
      - estate-network
    restart: unless-stopped

volumes:
  postgres-crm-data:
  postgres-history-data:
  postgres-notification-data:
  kafka-data:

networks:
  estate-network:
    driver: bridge