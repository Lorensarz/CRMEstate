apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql-notification
  namespace: crm-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgresql-notification
  template:
    metadata:
      labels:
        app: postgresql-notification
    spec:
      containers:
        - name: postgresql
          image: postgres:15-alpine
          env:
            - name: POSTGRES_DB
              value: "notification_db"
            - name: POSTGRES_USER
              value: "notification_user"
            - name: POSTGRES_PASSWORD
              value: "notification_password"
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: postgresql-storage
              mountPath: /var/lib/postgresql/data
            - name: init-script
              mountPath: /docker-entrypoint-initdb.d
          livenessProbe:
            exec:
              command: ["pg_isready", "-U", "notification_user", "-d", "notification_db"]
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command: ["pg_isready", "-U", "notification_user", "-d", "notification_db"]
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: postgresql-storage
          emptyDir: {}
        - name: init-script
          configMap:
            name: postgres-init-notification

---
apiVersion: v1
kind: Service
metadata:
  name: postgresql-notification-service
  namespace: crm-system
spec:
  selector:
    app: postgresql-notification
  ports:
    - port: 5432
      targetPort: 5432
  type: ClusterIP

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-notification
  namespace: crm-system
data:
  init-notification.sql: |
    CREATE TABLE IF NOT EXISTS notification_history (
        id BIGSERIAL PRIMARY KEY,
        task_id BIGINT NOT NULL,
        recipient VARCHAR(255) NOT NULL,
        notification_type VARCHAR(50) NOT NULL,
        subject VARCHAR(500),
        message TEXT,
        status VARCHAR(50) NOT NULL,
        error_message TEXT,
        retry_count INTEGER DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        sent_at TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    CREATE INDEX IF NOT EXISTS idx_notification_history_task_id ON notification_history(task_id);
    CREATE INDEX IF NOT EXISTS idx_notification_history_recipient ON notification_history(recipient);
    CREATE INDEX IF NOT EXISTS idx_notification_history_status ON notification_history(status);
    CREATE INDEX IF NOT EXISTS idx_notification_history_created_at ON notification_history(created_at);
    CREATE TABLE IF NOT EXISTS notification_config (
        id BIGSERIAL PRIMARY KEY,
        config_key VARCHAR(100) NOT NULL UNIQUE,
        config_value TEXT NOT NULL,
        description VARCHAR(500),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    INSERT INTO notification_config (config_key, config_value, description) VALUES
    ('email.enabled', 'true', 'Включение/выключение email уведомлений'),
    ('sms.enabled', 'true', 'Включение/выключение SMS уведомлений'),
    ('retry.max_attempts', '5', 'Максимальное количество попыток отправки'),
    ('retry.backoff_delay', '2000', 'Задержка между попытками в миллисекундах'),
    ('retry.backoff_multiplier', '2', 'Множитель для экспоненциальной задержки')
    ON CONFLICT (config_key) DO NOTHING;
    CREATE TABLE IF NOT EXISTS dlq_messages (
        id BIGSERIAL PRIMARY KEY,
        original_message JSONB NOT NULL,
        error_message TEXT NOT NULL,
        notification_type VARCHAR(50) NOT NULL,
        retry_attempts INTEGER DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        processed BOOLEAN DEFAULT FALSE
    );
    CREATE INDEX IF NOT EXISTS idx_dlq_messages_created_at ON dlq_messages(created_at);
    CREATE INDEX IF NOT EXISTS idx_dlq_messages_processed ON dlq_messages(processed);